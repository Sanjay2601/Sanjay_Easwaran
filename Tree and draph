def has_cycle(node, adj_list, visited, recursion_stack):
    visited[node] = True
    recursion_stack[node] = True

    for neighbor in adj_list[node]:
        if not visited[neighbor]:
            if has_cycle(neighbor, adj_list, visited, recursion_stack):
                return True
        elif recursion_stack[neighbor]:
            return True

    recursion_stack[node] = False
    return False


if __name__ == "__main__":
    N, M = map(int, input().split())

    adj_list = {i: [] for i in range(1, N + 1)}

    for _ in range(M):
        u, v = map(int, input().split())
        adj_list[u].append(v)

    visited = {i: False for i in range(1, N + 1)}
    recursion_stack = {i: False for i in range(1, N + 1)}

    has_cycles = False
    for node in adj_list:
        if not visited[node]:
            has_cycles = has_cycle(node, adj_list, visited, recursion_stack)
            if has_cycles:
                break

    if has_cycles:
        print("yes")
    else:
        print("no")
